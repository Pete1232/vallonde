AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Resources:
  UpdateDatabaseRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: lambda-dynamo
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - "dynamodb:*"
                Effect: Allow
                Resource: "*"
        - PolicyName: lambda-cloudwatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - "logs:*"
                Effect: Allow
                Resource: "*"
  UpdateS3Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: lambda-dynamo-streams
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - "dynamodb:DescribeStream"
                  - "dynamodb:GetRecords"
                  - "dynamodb:GetShardIterator"
                  - "dynamodb:ListStreams"
                Effect: Allow
                Resource: !GetAtt CharactersTable.StreamArn
        - PolicyName: lambda-s3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - "s3:*"
                Effect: Allow
                Resource: !GetAtt CharacterPageBucket.Arn
        - PolicyName: lambda-cloudwatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - "logs:*"
                Effect: Allow
                Resource: "*"
  CharactersTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: name
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: character
      StreamSpecification:
        StreamViewType: KEYS_ONLY
      Tags:
        - Key: name
          Value: character_table
        - Key: application
          Value: vallonde
  CharacterPageBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: PublicRead
      BucketName: vallonde
      LifecycleConfiguration:
        Rules:
          - NoncurrentVersionExpirationInDays: 15
            Status: Enabled
      VersioningConfiguration:
        Status: Enabled
      WebsiteConfiguration:
        ErrorDocument: error.html
        IndexDocument: index.html
      Tags:
        - Key: name
          Value: vallonde_bucket
        - Key: application
          Value: vallonde
  CharacterPageAssetsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketName: vallonde-assets
      CorsConfiguration:
        CorsRules:
          - AllowedMethods: [GET]
            AllowedOrigins: ['http://*']  #TODO add correct origin when known
      Tags:
        - Key: name
          Value: vallonde_bucket_assets
        - Key: application
          Value: vallonde
  UpdateCharacterDataFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: UpdateCharacterData
      Description: Updates the current model of the character stored in DynamoDB
      Handler: components.updatecharacter.handlers.DefaultUpdateCharacterDataHandler
      MemorySize: 1024
      Timeout: 15
      Role: !GetAtt UpdateDatabaseRole.Arn
      Events:
        UpdateCharacter:
            Type: Api
            Properties:
              Path: /character
              Method: POST
      CodeUri: ./target/scala-2.12/vallonde-assembly-999-SNAPSHOT.jar
      Runtime: java8
      AutoPublishAlias: DEV
      Tags:
        name: character_function_update
        application: vallonde
  GetCharacterDataApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: DEV
      DefinitionBody:
        basePath: /DEV
        swagger: 2.0
        info:
          title:
            GetCharacterData
        schemes:
          - https
        paths:
          /character/{name}:
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCharacterDataFunction.Arn}:DEV/invocations"
                passthroughBehavior: when_no_match
                httpMethod: GET
                type: aws_proxy
      Cors:
        AllowMethods: "'GET,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
  GetCharacterDataFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: GetCharacterData
      Description: Get the current data model for the character from DynamoDB
      Handler: components.get_character.handlers.DefaultGetCharacterDataHandler
      MemorySize: 1024
      Timeout: 15
      Role: !GetAtt UpdateDatabaseRole.Arn
      Events:
        UpdateCharacter:
            Type: Api
            Properties:
              RestApiId: !Ref GetCharacterDataApi
              Path: /character/{name}
              Method: GET
      CodeUri: ./target/scala-2.12/vallonde-assembly-999-SNAPSHOT.jar
      Runtime: java8
      AutoPublishAlias: DEV
      Tags:
        name: character_function_get
        application: vallonde
Outputs:
  GetCharacterDataUrl:
    Description: URL of the GetCharacterData API endpoint
    Value: !Join
      - ''
      - - https://
        - !Ref GetCharacterDataApi
        - '.execute-api.'
        - !Ref 'AWS::Region'
        - '.amazonaws.com'
